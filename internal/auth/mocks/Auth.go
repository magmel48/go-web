// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	auth "github.com/magmel48/go-web/internal/auth"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Auth is an autogenerated mock type for the Auth type
type Auth struct {
	mock.Mock
}

// Decode provides a mock function with given fields: sequence
func (_m *Auth) Decode(sequence []byte) (uuid.UUID, error) {
	ret := _m.Called(sequence)

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func([]byte) uuid.UUID); ok {
		r0 = rf(sequence)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(sequence)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encode provides a mock function with given fields: id, nonceFunc
func (_m *Auth) Encode(id uuid.UUID, nonceFunc auth.RandomNonceFunc) (string, error) {
	ret := _m.Called(id, nonceFunc)

	var r0 string
	if rf, ok := ret.Get(0).(func(uuid.UUID, auth.RandomNonceFunc) string); ok {
		r0 = rf(id, nonceFunc)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, auth.RandomNonceFunc) error); ok {
		r1 = rf(id, nonceFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
